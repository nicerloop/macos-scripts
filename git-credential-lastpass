#!/usr/bin/env bash

# A credential helper for git to retrieve usernames and passwords from lastpass.

# 1. Put this somewhere in your path.
# 2. git config --global credential.helper lastpass

# see documentation

# https://git-scm.com/docs/git-credential
# https://git-scm.com/docs/gitcredentials

# https://github.com/lastpass/lastpass-cli/blob/master/lpass.1.txt

# parse operation from command line
# optionaly get lastpass username/email address
if [ "$1" = "-l" ]; then
    lpassuser="$2"
    shift
    shift
fi
if [ $# -eq 0 ]; then
    echo "$0: missing operation" >&2
    exit
fi
if [ $# -gt 1 ]; then
    echo "$0: unexpected command line arguments '$*'" >&2
    exit
fi
if [ "$1" != "get" ] && [ "$1" != "store" ] && [ "$1" != "erase" ]; then
    # silently ignore uninmplemented operations
    exit
fi
operation="$1"

# parse attributes from stdin
while read -r line && [ -n "$line" ]; do
    name=$(
        echo "$line" | cut -d '=' -f 1 -s
    )
    value=$(
        echo "$line" | cut -d '=' -f 2 -s
    )
    case "$name" in
    "protocol")
        param_protocol="$value"
        ;;
    "host")
        param_host="$value"
        ;;
    "path")
        param_path="$value"
        ;;
    "username")
        param_username="$value"
        ;;
    "password")
        param_password="$value"
        ;;
    esac
done

# log into lastpass if needed
# ask from username / email address if needed
if ! lpass status -q; then
    if [ -z "$lpassuser" ] && [ "$LPASS_DISABLE_PINENTRY" != "1" ]; then
        if [ -n "$LPASS_PINENTRY" ]; then
            pinentry=$LPASS_PINENTRY
        else
            pinentry="pinentry"
        fi
        if [ -x "$(
            unset -f command
            command -v $pinentry
        )" ]; then
            lpassuser=$(
                $pinentry <<EOF | grep '^D ' | cut -d ' ' -f 2
SETTITLE git-credential-lastpass
SETDESC Please enter the e-mail address for LastPass account.
SETPROMPT e-mail address:
GETPIN
EOF
            )
        fi
        if [ -z "$lpassuser" ]; then
            echo "Lastpass username entry canceled" >&2
            exit
        fi
    fi
    if [ -z "$lpassuser" ] && [ -n "$LPASS_ASKPASS" ] && [ -x "$(
        unset -f command
        command -v $LPASS_ASKPASS
    )" ]; then
        lpassuser=$(
            $LPASS_ASKPASS "e-mail address:"
        )
        if [ -z "$lpassuser" ]; then
            echo "Lastpass username entry canceled" >&2
            exit
        fi
    fi
    if [ -z "$lpassuser" ]; then
        read -r -p "Lastpass: login required. Lastpass username: " lpassuser </dev/tty >/dev/tty
        if [ -z "$lpassuser" ]; then
            echo "Lastpass username entry canceled" >&2
            exit
        fi
    fi
    if ! lpass login "$lpassuser" >&2; then
        echo "Lastpass: failed to login" >&2
        exit
    fi
fi

# export lastpass entries: id url username
# filter entries according to attributes: protocol, host, username, path
ids=$(
    lpass ls --format "%ai %al %au" | (
        while read -r id url user; do
            protocol=$(
                echo "$url" | cut -d ':' -f 1 -s
            )
            user_pass_host_port=$(
                echo "$url" | cut -d '/' -f 3 -s
            )
            # user_pass=$(
            #     echo "$user_pass_host_port" | cut -d '@' -f 1 -s
            # )
            # user=$(
            #     echo "$user_pass" | cut -d ':' -f 1
            # )
            # pass=$(
            #     echo $user_pass | cut -d ':' -f 2 -s
            # )
            host_port=$(
                echo "$user_pass_host_port" | cut -d '@' -f 2
            )
            # host=$(
            #     echo $host_port | cut -d ':' -f 1
            # )
            # port=$(
            #     echo $host_port | cut -d ':' -f 2 -s
            # )
            path=$(
                echo "$url" | cut -d '/' -f 4- -s
            )
            # echo "$id $protocol $user $pass $host $port $path"
            if [ -n "$param_protocol" ] && [ "$param_protocol" != "$protocol" ]; then
                continue
            fi
            if [ -n "$param_host" ] && [ "$param_host" != "$host_port" ]; then
                continue
            fi
            if [ -n "$param_username" ] && [ "$param_username" != "$user" ]; then
                continue
            fi
            if [ -n "$param_path" ] && [ "$param_path" != "$path" ]; then
                continue
            fi
            if [ -n "$path" ] && [ "$param_path" != "$path" ]; then
                continue
            fi
            echo "$id"
        done
    )
)
id_count=$(echo "$ids" | wc -w)
if [ "$id_count" -gt "1" ]; then
    echo "More than one secret found" >&2
    exit
fi
id="$ids"

# proceed to operation
case "$operation" in
get)
    if [ "$id_count" -eq "0" ]; then
        # not found, silently exit
        exit
    fi
    secret=$(
        lpass show "$id"
    )
    secret_username=$(
        echo "$secret" | grep Username | cut -d ' ' -f 2
    )
    secret_password=$(
        echo "$secret" | grep Password | cut -d ' ' -f 2
    )
    echo "username=$secret_username"
    echo "password=$secret_password"
    ;;
store)
    if [ "$id_count" -eq "0" ]; then
        # not found, add
        lastpass_protocol="$param_protocol"
        if [ -z "$lastpass_protocol" ]; then
            lastpass_protocol="https"
        fi
        lpass add --sync=no "$param_host" --non-interactive >&2 <<EOF
URL: $lastpass_protocol://$param_host/$param_path
Username: $param_username
Password: $param_password
EOF
    else
        # found, edit
        lpass edit --sync=no "$id" --non-interactive >&2 <<EOF
Username: $param_username
Password: $param_password
EOF
    fi
    ;;
erase)
    if [ "$id_count" -eq "0" ]; then
        # not found, silently exit
        exit
    fi
    lpass rm "$id" >&2
    ;;
esac

# https://github.com/lastpass/lastpass-cli/blob/master/contrib/examples/git-credential-lastpass
# https://github.com/lastpass/lastpass-cli/pull/587
# https://github.com/maelvls/lastpass-cli/commits/rework-git-helper/contrib/examples/git-credential-lastpass
# https://github.com/lastpass-cli-fork/lastpass-cli/
